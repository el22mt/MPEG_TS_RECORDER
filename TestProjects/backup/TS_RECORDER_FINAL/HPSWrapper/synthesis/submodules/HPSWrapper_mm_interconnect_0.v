// HPSWrapper_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 17.1 593

`timescale 1 ps / 1 ps
module HPSWrapper_mm_interconnect_0 (
		input  wire [11:0] arm_hps_h2f_axi_master_awid,                                        //                                       arm_hps_h2f_axi_master.awid
		input  wire [29:0] arm_hps_h2f_axi_master_awaddr,                                      //                                                             .awaddr
		input  wire [3:0]  arm_hps_h2f_axi_master_awlen,                                       //                                                             .awlen
		input  wire [2:0]  arm_hps_h2f_axi_master_awsize,                                      //                                                             .awsize
		input  wire [1:0]  arm_hps_h2f_axi_master_awburst,                                     //                                                             .awburst
		input  wire [1:0]  arm_hps_h2f_axi_master_awlock,                                      //                                                             .awlock
		input  wire [3:0]  arm_hps_h2f_axi_master_awcache,                                     //                                                             .awcache
		input  wire [2:0]  arm_hps_h2f_axi_master_awprot,                                      //                                                             .awprot
		input  wire        arm_hps_h2f_axi_master_awvalid,                                     //                                                             .awvalid
		output wire        arm_hps_h2f_axi_master_awready,                                     //                                                             .awready
		input  wire [11:0] arm_hps_h2f_axi_master_wid,                                         //                                                             .wid
		input  wire [31:0] arm_hps_h2f_axi_master_wdata,                                       //                                                             .wdata
		input  wire [3:0]  arm_hps_h2f_axi_master_wstrb,                                       //                                                             .wstrb
		input  wire        arm_hps_h2f_axi_master_wlast,                                       //                                                             .wlast
		input  wire        arm_hps_h2f_axi_master_wvalid,                                      //                                                             .wvalid
		output wire        arm_hps_h2f_axi_master_wready,                                      //                                                             .wready
		output wire [11:0] arm_hps_h2f_axi_master_bid,                                         //                                                             .bid
		output wire [1:0]  arm_hps_h2f_axi_master_bresp,                                       //                                                             .bresp
		output wire        arm_hps_h2f_axi_master_bvalid,                                      //                                                             .bvalid
		input  wire        arm_hps_h2f_axi_master_bready,                                      //                                                             .bready
		input  wire [11:0] arm_hps_h2f_axi_master_arid,                                        //                                                             .arid
		input  wire [29:0] arm_hps_h2f_axi_master_araddr,                                      //                                                             .araddr
		input  wire [3:0]  arm_hps_h2f_axi_master_arlen,                                       //                                                             .arlen
		input  wire [2:0]  arm_hps_h2f_axi_master_arsize,                                      //                                                             .arsize
		input  wire [1:0]  arm_hps_h2f_axi_master_arburst,                                     //                                                             .arburst
		input  wire [1:0]  arm_hps_h2f_axi_master_arlock,                                      //                                                             .arlock
		input  wire [3:0]  arm_hps_h2f_axi_master_arcache,                                     //                                                             .arcache
		input  wire [2:0]  arm_hps_h2f_axi_master_arprot,                                      //                                                             .arprot
		input  wire        arm_hps_h2f_axi_master_arvalid,                                     //                                                             .arvalid
		output wire        arm_hps_h2f_axi_master_arready,                                     //                                                             .arready
		output wire [11:0] arm_hps_h2f_axi_master_rid,                                         //                                                             .rid
		output wire [31:0] arm_hps_h2f_axi_master_rdata,                                       //                                                             .rdata
		output wire [1:0]  arm_hps_h2f_axi_master_rresp,                                       //                                                             .rresp
		output wire        arm_hps_h2f_axi_master_rlast,                                       //                                                             .rlast
		output wire        arm_hps_h2f_axi_master_rvalid,                                      //                                                             .rvalid
		input  wire        arm_hps_h2f_axi_master_rready,                                      //                                                             .rready
		input  wire        arm_hps_h2f_user0_clock_clk,                                        //                                      arm_hps_h2f_user0_clock.clk
		input  wire        arm_hps_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset, // arm_hps_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset.reset
		input  wire        baremetal_reset1_reset_bridge_in_reset_reset,                       //                       baremetal_reset1_reset_bridge_in_reset.reset
		output wire [13:0] baremetal_s1_address,                                               //                                                 baremetal_s1.address
		output wire        baremetal_s1_write,                                                 //                                                             .write
		input  wire [31:0] baremetal_s1_readdata,                                              //                                                             .readdata
		output wire [31:0] baremetal_s1_writedata,                                             //                                                             .writedata
		output wire [3:0]  baremetal_s1_byteenable,                                            //                                                             .byteenable
		output wire        baremetal_s1_chipselect,                                            //                                                             .chipselect
		output wire        baremetal_s1_clken,                                                 //                                                             .clken
		output wire [11:0] ocram_s1_address,                                                   //                                                     ocram_s1.address
		output wire        ocram_s1_write,                                                     //                                                             .write
		input  wire [31:0] ocram_s1_readdata,                                                  //                                                             .readdata
		output wire [31:0] ocram_s1_writedata,                                                 //                                                             .writedata
		output wire [3:0]  ocram_s1_byteenable,                                                //                                                             .byteenable
		output wire        ocram_s1_chipselect,                                                //                                                             .chipselect
		output wire        ocram_s1_clken                                                      //                                                             .clken
	);

	wire   [31:0] baremetal_s1_agent_m0_readdata;                          // baremetal_s1_translator:uav_readdata -> baremetal_s1_agent:m0_readdata
	wire          baremetal_s1_agent_m0_waitrequest;                       // baremetal_s1_translator:uav_waitrequest -> baremetal_s1_agent:m0_waitrequest
	wire          baremetal_s1_agent_m0_debugaccess;                       // baremetal_s1_agent:m0_debugaccess -> baremetal_s1_translator:uav_debugaccess
	wire   [29:0] baremetal_s1_agent_m0_address;                           // baremetal_s1_agent:m0_address -> baremetal_s1_translator:uav_address
	wire    [3:0] baremetal_s1_agent_m0_byteenable;                        // baremetal_s1_agent:m0_byteenable -> baremetal_s1_translator:uav_byteenable
	wire          baremetal_s1_agent_m0_read;                              // baremetal_s1_agent:m0_read -> baremetal_s1_translator:uav_read
	wire          baremetal_s1_agent_m0_readdatavalid;                     // baremetal_s1_translator:uav_readdatavalid -> baremetal_s1_agent:m0_readdatavalid
	wire          baremetal_s1_agent_m0_lock;                              // baremetal_s1_agent:m0_lock -> baremetal_s1_translator:uav_lock
	wire   [31:0] baremetal_s1_agent_m0_writedata;                         // baremetal_s1_agent:m0_writedata -> baremetal_s1_translator:uav_writedata
	wire          baremetal_s1_agent_m0_write;                             // baremetal_s1_agent:m0_write -> baremetal_s1_translator:uav_write
	wire    [2:0] baremetal_s1_agent_m0_burstcount;                        // baremetal_s1_agent:m0_burstcount -> baremetal_s1_translator:uav_burstcount
	wire          baremetal_s1_agent_rf_source_valid;                      // baremetal_s1_agent:rf_source_valid -> baremetal_s1_agent_rsp_fifo:in_valid
	wire  [121:0] baremetal_s1_agent_rf_source_data;                       // baremetal_s1_agent:rf_source_data -> baremetal_s1_agent_rsp_fifo:in_data
	wire          baremetal_s1_agent_rf_source_ready;                      // baremetal_s1_agent_rsp_fifo:in_ready -> baremetal_s1_agent:rf_source_ready
	wire          baremetal_s1_agent_rf_source_startofpacket;              // baremetal_s1_agent:rf_source_startofpacket -> baremetal_s1_agent_rsp_fifo:in_startofpacket
	wire          baremetal_s1_agent_rf_source_endofpacket;                // baremetal_s1_agent:rf_source_endofpacket -> baremetal_s1_agent_rsp_fifo:in_endofpacket
	wire          baremetal_s1_agent_rsp_fifo_out_valid;                   // baremetal_s1_agent_rsp_fifo:out_valid -> baremetal_s1_agent:rf_sink_valid
	wire  [121:0] baremetal_s1_agent_rsp_fifo_out_data;                    // baremetal_s1_agent_rsp_fifo:out_data -> baremetal_s1_agent:rf_sink_data
	wire          baremetal_s1_agent_rsp_fifo_out_ready;                   // baremetal_s1_agent:rf_sink_ready -> baremetal_s1_agent_rsp_fifo:out_ready
	wire          baremetal_s1_agent_rsp_fifo_out_startofpacket;           // baremetal_s1_agent_rsp_fifo:out_startofpacket -> baremetal_s1_agent:rf_sink_startofpacket
	wire          baremetal_s1_agent_rsp_fifo_out_endofpacket;             // baremetal_s1_agent_rsp_fifo:out_endofpacket -> baremetal_s1_agent:rf_sink_endofpacket
	wire          baremetal_s1_agent_rdata_fifo_src_valid;                 // baremetal_s1_agent:rdata_fifo_src_valid -> baremetal_s1_agent_rdata_fifo:in_valid
	wire   [33:0] baremetal_s1_agent_rdata_fifo_src_data;                  // baremetal_s1_agent:rdata_fifo_src_data -> baremetal_s1_agent_rdata_fifo:in_data
	wire          baremetal_s1_agent_rdata_fifo_src_ready;                 // baremetal_s1_agent_rdata_fifo:in_ready -> baremetal_s1_agent:rdata_fifo_src_ready
	wire   [31:0] ocram_s1_agent_m0_readdata;                              // ocram_s1_translator:uav_readdata -> ocram_s1_agent:m0_readdata
	wire          ocram_s1_agent_m0_waitrequest;                           // ocram_s1_translator:uav_waitrequest -> ocram_s1_agent:m0_waitrequest
	wire          ocram_s1_agent_m0_debugaccess;                           // ocram_s1_agent:m0_debugaccess -> ocram_s1_translator:uav_debugaccess
	wire   [29:0] ocram_s1_agent_m0_address;                               // ocram_s1_agent:m0_address -> ocram_s1_translator:uav_address
	wire    [3:0] ocram_s1_agent_m0_byteenable;                            // ocram_s1_agent:m0_byteenable -> ocram_s1_translator:uav_byteenable
	wire          ocram_s1_agent_m0_read;                                  // ocram_s1_agent:m0_read -> ocram_s1_translator:uav_read
	wire          ocram_s1_agent_m0_readdatavalid;                         // ocram_s1_translator:uav_readdatavalid -> ocram_s1_agent:m0_readdatavalid
	wire          ocram_s1_agent_m0_lock;                                  // ocram_s1_agent:m0_lock -> ocram_s1_translator:uav_lock
	wire   [31:0] ocram_s1_agent_m0_writedata;                             // ocram_s1_agent:m0_writedata -> ocram_s1_translator:uav_writedata
	wire          ocram_s1_agent_m0_write;                                 // ocram_s1_agent:m0_write -> ocram_s1_translator:uav_write
	wire    [2:0] ocram_s1_agent_m0_burstcount;                            // ocram_s1_agent:m0_burstcount -> ocram_s1_translator:uav_burstcount
	wire          ocram_s1_agent_rf_source_valid;                          // ocram_s1_agent:rf_source_valid -> ocram_s1_agent_rsp_fifo:in_valid
	wire  [121:0] ocram_s1_agent_rf_source_data;                           // ocram_s1_agent:rf_source_data -> ocram_s1_agent_rsp_fifo:in_data
	wire          ocram_s1_agent_rf_source_ready;                          // ocram_s1_agent_rsp_fifo:in_ready -> ocram_s1_agent:rf_source_ready
	wire          ocram_s1_agent_rf_source_startofpacket;                  // ocram_s1_agent:rf_source_startofpacket -> ocram_s1_agent_rsp_fifo:in_startofpacket
	wire          ocram_s1_agent_rf_source_endofpacket;                    // ocram_s1_agent:rf_source_endofpacket -> ocram_s1_agent_rsp_fifo:in_endofpacket
	wire          ocram_s1_agent_rsp_fifo_out_valid;                       // ocram_s1_agent_rsp_fifo:out_valid -> ocram_s1_agent:rf_sink_valid
	wire  [121:0] ocram_s1_agent_rsp_fifo_out_data;                        // ocram_s1_agent_rsp_fifo:out_data -> ocram_s1_agent:rf_sink_data
	wire          ocram_s1_agent_rsp_fifo_out_ready;                       // ocram_s1_agent:rf_sink_ready -> ocram_s1_agent_rsp_fifo:out_ready
	wire          ocram_s1_agent_rsp_fifo_out_startofpacket;               // ocram_s1_agent_rsp_fifo:out_startofpacket -> ocram_s1_agent:rf_sink_startofpacket
	wire          ocram_s1_agent_rsp_fifo_out_endofpacket;                 // ocram_s1_agent_rsp_fifo:out_endofpacket -> ocram_s1_agent:rf_sink_endofpacket
	wire          ocram_s1_agent_rdata_fifo_src_valid;                     // ocram_s1_agent:rdata_fifo_src_valid -> ocram_s1_agent_rdata_fifo:in_valid
	wire   [33:0] ocram_s1_agent_rdata_fifo_src_data;                      // ocram_s1_agent:rdata_fifo_src_data -> ocram_s1_agent_rdata_fifo:in_data
	wire          ocram_s1_agent_rdata_fifo_src_ready;                     // ocram_s1_agent_rdata_fifo:in_ready -> ocram_s1_agent:rdata_fifo_src_ready
	wire          arm_hps_h2f_axi_master_agent_write_cp_valid;             // arm_hps_h2f_axi_master_agent:write_cp_valid -> router:sink_valid
	wire  [120:0] arm_hps_h2f_axi_master_agent_write_cp_data;              // arm_hps_h2f_axi_master_agent:write_cp_data -> router:sink_data
	wire          arm_hps_h2f_axi_master_agent_write_cp_ready;             // router:sink_ready -> arm_hps_h2f_axi_master_agent:write_cp_ready
	wire          arm_hps_h2f_axi_master_agent_write_cp_startofpacket;     // arm_hps_h2f_axi_master_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          arm_hps_h2f_axi_master_agent_write_cp_endofpacket;       // arm_hps_h2f_axi_master_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          arm_hps_h2f_axi_master_agent_read_cp_valid;              // arm_hps_h2f_axi_master_agent:read_cp_valid -> router_001:sink_valid
	wire  [120:0] arm_hps_h2f_axi_master_agent_read_cp_data;               // arm_hps_h2f_axi_master_agent:read_cp_data -> router_001:sink_data
	wire          arm_hps_h2f_axi_master_agent_read_cp_ready;              // router_001:sink_ready -> arm_hps_h2f_axi_master_agent:read_cp_ready
	wire          arm_hps_h2f_axi_master_agent_read_cp_startofpacket;      // arm_hps_h2f_axi_master_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          arm_hps_h2f_axi_master_agent_read_cp_endofpacket;        // arm_hps_h2f_axi_master_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          baremetal_s1_agent_rp_valid;                             // baremetal_s1_agent:rp_valid -> router_002:sink_valid
	wire  [120:0] baremetal_s1_agent_rp_data;                              // baremetal_s1_agent:rp_data -> router_002:sink_data
	wire          baremetal_s1_agent_rp_ready;                             // router_002:sink_ready -> baremetal_s1_agent:rp_ready
	wire          baremetal_s1_agent_rp_startofpacket;                     // baremetal_s1_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          baremetal_s1_agent_rp_endofpacket;                       // baremetal_s1_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                    // router_002:src_valid -> rsp_demux:sink_valid
	wire  [120:0] router_002_src_data;                                     // router_002:src_data -> rsp_demux:sink_data
	wire          router_002_src_ready;                                    // rsp_demux:sink_ready -> router_002:src_ready
	wire    [1:0] router_002_src_channel;                                  // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_startofpacket;                            // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_002_src_endofpacket;                              // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          ocram_s1_agent_rp_valid;                                 // ocram_s1_agent:rp_valid -> router_003:sink_valid
	wire  [120:0] ocram_s1_agent_rp_data;                                  // ocram_s1_agent:rp_data -> router_003:sink_data
	wire          ocram_s1_agent_rp_ready;                                 // router_003:sink_ready -> ocram_s1_agent:rp_ready
	wire          ocram_s1_agent_rp_startofpacket;                         // ocram_s1_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          ocram_s1_agent_rp_endofpacket;                           // ocram_s1_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                    // router_003:src_valid -> rsp_demux_001:sink_valid
	wire  [120:0] router_003_src_data;                                     // router_003:src_data -> rsp_demux_001:sink_data
	wire          router_003_src_ready;                                    // rsp_demux_001:sink_ready -> router_003:src_ready
	wire    [1:0] router_003_src_channel;                                  // router_003:src_channel -> rsp_demux_001:sink_channel
	wire          router_003_src_startofpacket;                            // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_003_src_endofpacket;                              // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          router_src_valid;                                        // router:src_valid -> arm_hps_h2f_axi_master_wr_limiter:cmd_sink_valid
	wire  [120:0] router_src_data;                                         // router:src_data -> arm_hps_h2f_axi_master_wr_limiter:cmd_sink_data
	wire          router_src_ready;                                        // arm_hps_h2f_axi_master_wr_limiter:cmd_sink_ready -> router:src_ready
	wire    [1:0] router_src_channel;                                      // router:src_channel -> arm_hps_h2f_axi_master_wr_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                // router:src_startofpacket -> arm_hps_h2f_axi_master_wr_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                  // router:src_endofpacket -> arm_hps_h2f_axi_master_wr_limiter:cmd_sink_endofpacket
	wire  [120:0] arm_hps_h2f_axi_master_wr_limiter_cmd_src_data;          // arm_hps_h2f_axi_master_wr_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          arm_hps_h2f_axi_master_wr_limiter_cmd_src_ready;         // cmd_demux:sink_ready -> arm_hps_h2f_axi_master_wr_limiter:cmd_src_ready
	wire    [1:0] arm_hps_h2f_axi_master_wr_limiter_cmd_src_channel;       // arm_hps_h2f_axi_master_wr_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          arm_hps_h2f_axi_master_wr_limiter_cmd_src_startofpacket; // arm_hps_h2f_axi_master_wr_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          arm_hps_h2f_axi_master_wr_limiter_cmd_src_endofpacket;   // arm_hps_h2f_axi_master_wr_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                       // rsp_mux:src_valid -> arm_hps_h2f_axi_master_wr_limiter:rsp_sink_valid
	wire  [120:0] rsp_mux_src_data;                                        // rsp_mux:src_data -> arm_hps_h2f_axi_master_wr_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                       // arm_hps_h2f_axi_master_wr_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire    [1:0] rsp_mux_src_channel;                                     // rsp_mux:src_channel -> arm_hps_h2f_axi_master_wr_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                               // rsp_mux:src_startofpacket -> arm_hps_h2f_axi_master_wr_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                 // rsp_mux:src_endofpacket -> arm_hps_h2f_axi_master_wr_limiter:rsp_sink_endofpacket
	wire          arm_hps_h2f_axi_master_wr_limiter_rsp_src_valid;         // arm_hps_h2f_axi_master_wr_limiter:rsp_src_valid -> arm_hps_h2f_axi_master_agent:write_rp_valid
	wire  [120:0] arm_hps_h2f_axi_master_wr_limiter_rsp_src_data;          // arm_hps_h2f_axi_master_wr_limiter:rsp_src_data -> arm_hps_h2f_axi_master_agent:write_rp_data
	wire          arm_hps_h2f_axi_master_wr_limiter_rsp_src_ready;         // arm_hps_h2f_axi_master_agent:write_rp_ready -> arm_hps_h2f_axi_master_wr_limiter:rsp_src_ready
	wire    [1:0] arm_hps_h2f_axi_master_wr_limiter_rsp_src_channel;       // arm_hps_h2f_axi_master_wr_limiter:rsp_src_channel -> arm_hps_h2f_axi_master_agent:write_rp_channel
	wire          arm_hps_h2f_axi_master_wr_limiter_rsp_src_startofpacket; // arm_hps_h2f_axi_master_wr_limiter:rsp_src_startofpacket -> arm_hps_h2f_axi_master_agent:write_rp_startofpacket
	wire          arm_hps_h2f_axi_master_wr_limiter_rsp_src_endofpacket;   // arm_hps_h2f_axi_master_wr_limiter:rsp_src_endofpacket -> arm_hps_h2f_axi_master_agent:write_rp_endofpacket
	wire          router_001_src_valid;                                    // router_001:src_valid -> arm_hps_h2f_axi_master_rd_limiter:cmd_sink_valid
	wire  [120:0] router_001_src_data;                                     // router_001:src_data -> arm_hps_h2f_axi_master_rd_limiter:cmd_sink_data
	wire          router_001_src_ready;                                    // arm_hps_h2f_axi_master_rd_limiter:cmd_sink_ready -> router_001:src_ready
	wire    [1:0] router_001_src_channel;                                  // router_001:src_channel -> arm_hps_h2f_axi_master_rd_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                            // router_001:src_startofpacket -> arm_hps_h2f_axi_master_rd_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                              // router_001:src_endofpacket -> arm_hps_h2f_axi_master_rd_limiter:cmd_sink_endofpacket
	wire  [120:0] arm_hps_h2f_axi_master_rd_limiter_cmd_src_data;          // arm_hps_h2f_axi_master_rd_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          arm_hps_h2f_axi_master_rd_limiter_cmd_src_ready;         // cmd_demux_001:sink_ready -> arm_hps_h2f_axi_master_rd_limiter:cmd_src_ready
	wire    [1:0] arm_hps_h2f_axi_master_rd_limiter_cmd_src_channel;       // arm_hps_h2f_axi_master_rd_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          arm_hps_h2f_axi_master_rd_limiter_cmd_src_startofpacket; // arm_hps_h2f_axi_master_rd_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          arm_hps_h2f_axi_master_rd_limiter_cmd_src_endofpacket;   // arm_hps_h2f_axi_master_rd_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                   // rsp_mux_001:src_valid -> arm_hps_h2f_axi_master_rd_limiter:rsp_sink_valid
	wire  [120:0] rsp_mux_001_src_data;                                    // rsp_mux_001:src_data -> arm_hps_h2f_axi_master_rd_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                   // arm_hps_h2f_axi_master_rd_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire    [1:0] rsp_mux_001_src_channel;                                 // rsp_mux_001:src_channel -> arm_hps_h2f_axi_master_rd_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                           // rsp_mux_001:src_startofpacket -> arm_hps_h2f_axi_master_rd_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                             // rsp_mux_001:src_endofpacket -> arm_hps_h2f_axi_master_rd_limiter:rsp_sink_endofpacket
	wire          arm_hps_h2f_axi_master_rd_limiter_rsp_src_valid;         // arm_hps_h2f_axi_master_rd_limiter:rsp_src_valid -> arm_hps_h2f_axi_master_agent:read_rp_valid
	wire  [120:0] arm_hps_h2f_axi_master_rd_limiter_rsp_src_data;          // arm_hps_h2f_axi_master_rd_limiter:rsp_src_data -> arm_hps_h2f_axi_master_agent:read_rp_data
	wire          arm_hps_h2f_axi_master_rd_limiter_rsp_src_ready;         // arm_hps_h2f_axi_master_agent:read_rp_ready -> arm_hps_h2f_axi_master_rd_limiter:rsp_src_ready
	wire    [1:0] arm_hps_h2f_axi_master_rd_limiter_rsp_src_channel;       // arm_hps_h2f_axi_master_rd_limiter:rsp_src_channel -> arm_hps_h2f_axi_master_agent:read_rp_channel
	wire          arm_hps_h2f_axi_master_rd_limiter_rsp_src_startofpacket; // arm_hps_h2f_axi_master_rd_limiter:rsp_src_startofpacket -> arm_hps_h2f_axi_master_agent:read_rp_startofpacket
	wire          arm_hps_h2f_axi_master_rd_limiter_rsp_src_endofpacket;   // arm_hps_h2f_axi_master_rd_limiter:rsp_src_endofpacket -> arm_hps_h2f_axi_master_agent:read_rp_endofpacket
	wire          cmd_mux_src_valid;                                       // cmd_mux:src_valid -> baremetal_s1_burst_adapter:sink0_valid
	wire  [120:0] cmd_mux_src_data;                                        // cmd_mux:src_data -> baremetal_s1_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                       // baremetal_s1_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire    [1:0] cmd_mux_src_channel;                                     // cmd_mux:src_channel -> baremetal_s1_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                               // cmd_mux:src_startofpacket -> baremetal_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                 // cmd_mux:src_endofpacket -> baremetal_s1_burst_adapter:sink0_endofpacket
	wire          baremetal_s1_burst_adapter_source0_valid;                // baremetal_s1_burst_adapter:source0_valid -> baremetal_s1_agent:cp_valid
	wire  [120:0] baremetal_s1_burst_adapter_source0_data;                 // baremetal_s1_burst_adapter:source0_data -> baremetal_s1_agent:cp_data
	wire          baremetal_s1_burst_adapter_source0_ready;                // baremetal_s1_agent:cp_ready -> baremetal_s1_burst_adapter:source0_ready
	wire    [1:0] baremetal_s1_burst_adapter_source0_channel;              // baremetal_s1_burst_adapter:source0_channel -> baremetal_s1_agent:cp_channel
	wire          baremetal_s1_burst_adapter_source0_startofpacket;        // baremetal_s1_burst_adapter:source0_startofpacket -> baremetal_s1_agent:cp_startofpacket
	wire          baremetal_s1_burst_adapter_source0_endofpacket;          // baremetal_s1_burst_adapter:source0_endofpacket -> baremetal_s1_agent:cp_endofpacket
	wire          cmd_mux_001_src_valid;                                   // cmd_mux_001:src_valid -> ocram_s1_burst_adapter:sink0_valid
	wire  [120:0] cmd_mux_001_src_data;                                    // cmd_mux_001:src_data -> ocram_s1_burst_adapter:sink0_data
	wire          cmd_mux_001_src_ready;                                   // ocram_s1_burst_adapter:sink0_ready -> cmd_mux_001:src_ready
	wire    [1:0] cmd_mux_001_src_channel;                                 // cmd_mux_001:src_channel -> ocram_s1_burst_adapter:sink0_channel
	wire          cmd_mux_001_src_startofpacket;                           // cmd_mux_001:src_startofpacket -> ocram_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_001_src_endofpacket;                             // cmd_mux_001:src_endofpacket -> ocram_s1_burst_adapter:sink0_endofpacket
	wire          ocram_s1_burst_adapter_source0_valid;                    // ocram_s1_burst_adapter:source0_valid -> ocram_s1_agent:cp_valid
	wire  [120:0] ocram_s1_burst_adapter_source0_data;                     // ocram_s1_burst_adapter:source0_data -> ocram_s1_agent:cp_data
	wire          ocram_s1_burst_adapter_source0_ready;                    // ocram_s1_agent:cp_ready -> ocram_s1_burst_adapter:source0_ready
	wire    [1:0] ocram_s1_burst_adapter_source0_channel;                  // ocram_s1_burst_adapter:source0_channel -> ocram_s1_agent:cp_channel
	wire          ocram_s1_burst_adapter_source0_startofpacket;            // ocram_s1_burst_adapter:source0_startofpacket -> ocram_s1_agent:cp_startofpacket
	wire          ocram_s1_burst_adapter_source0_endofpacket;              // ocram_s1_burst_adapter:source0_endofpacket -> ocram_s1_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                    // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [120:0] cmd_demux_src0_data;                                     // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                    // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [1:0] cmd_demux_src0_channel;                                  // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                            // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                              // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                    // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [120:0] cmd_demux_src1_data;                                     // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                    // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire    [1:0] cmd_demux_src1_channel;                                  // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                            // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                              // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [120:0] cmd_demux_001_src0_data;                                 // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire    [1:0] cmd_demux_001_src0_channel;                              // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                        // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                          // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                // cmd_demux_001:src1_valid -> cmd_mux_001:sink1_valid
	wire  [120:0] cmd_demux_001_src1_data;                                 // cmd_demux_001:src1_data -> cmd_mux_001:sink1_data
	wire          cmd_demux_001_src1_ready;                                // cmd_mux_001:sink1_ready -> cmd_demux_001:src1_ready
	wire    [1:0] cmd_demux_001_src1_channel;                              // cmd_demux_001:src1_channel -> cmd_mux_001:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                        // cmd_demux_001:src1_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                          // cmd_demux_001:src1_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                    // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [120:0] rsp_demux_src0_data;                                     // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                    // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [1:0] rsp_demux_src0_channel;                                  // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                            // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                              // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                    // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [120:0] rsp_demux_src1_data;                                     // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                    // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire    [1:0] rsp_demux_src1_channel;                                  // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                            // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                              // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [120:0] rsp_demux_001_src0_data;                                 // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire    [1:0] rsp_demux_001_src0_channel;                              // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                        // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                          // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                // rsp_demux_001:src1_valid -> rsp_mux_001:sink1_valid
	wire  [120:0] rsp_demux_001_src1_data;                                 // rsp_demux_001:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_001_src1_ready;                                // rsp_mux_001:sink1_ready -> rsp_demux_001:src1_ready
	wire    [1:0] rsp_demux_001_src1_channel;                              // rsp_demux_001:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_001_src1_startofpacket;                        // rsp_demux_001:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                          // rsp_demux_001:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire    [1:0] arm_hps_h2f_axi_master_wr_limiter_cmd_valid_data;        // arm_hps_h2f_axi_master_wr_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire    [1:0] arm_hps_h2f_axi_master_rd_limiter_cmd_valid_data;        // arm_hps_h2f_axi_master_rd_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire          baremetal_s1_agent_rdata_fifo_out_valid;                 // baremetal_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] baremetal_s1_agent_rdata_fifo_out_data;                  // baremetal_s1_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          baremetal_s1_agent_rdata_fifo_out_ready;                 // avalon_st_adapter:in_0_ready -> baremetal_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                           // avalon_st_adapter:out_0_valid -> baremetal_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                            // avalon_st_adapter:out_0_data -> baremetal_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                           // baremetal_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                           // avalon_st_adapter:out_0_error -> baremetal_s1_agent:rdata_fifo_sink_error
	wire          ocram_s1_agent_rdata_fifo_out_valid;                     // ocram_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] ocram_s1_agent_rdata_fifo_out_data;                      // ocram_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          ocram_s1_agent_rdata_fifo_out_ready;                     // avalon_st_adapter_001:in_0_ready -> ocram_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                       // avalon_st_adapter_001:out_0_valid -> ocram_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                        // avalon_st_adapter_001:out_0_data -> ocram_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                       // ocram_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                       // avalon_st_adapter_001:out_0_error -> ocram_s1_agent:rdata_fifo_sink_error

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (14),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) baremetal_s1_translator (
		.clk                    (arm_hps_h2f_user0_clock_clk),                  //                      clk.clk
		.reset                  (baremetal_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (baremetal_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (baremetal_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (baremetal_s1_agent_m0_read),                   //                         .read
		.uav_write              (baremetal_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest        (baremetal_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (baremetal_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (baremetal_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (baremetal_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (baremetal_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock               (baremetal_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (baremetal_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (baremetal_s1_address),                         //      avalon_anti_slave_0.address
		.av_write               (baremetal_s1_write),                           //                         .write
		.av_readdata            (baremetal_s1_readdata),                        //                         .readdata
		.av_writedata           (baremetal_s1_writedata),                       //                         .writedata
		.av_byteenable          (baremetal_s1_byteenable),                      //                         .byteenable
		.av_chipselect          (baremetal_s1_chipselect),                      //                         .chipselect
		.av_clken               (baremetal_s1_clken),                           //                         .clken
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (12),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ocram_s1_translator (
		.clk                    (arm_hps_h2f_user0_clock_clk),                  //                      clk.clk
		.reset                  (baremetal_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ocram_s1_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (ocram_s1_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (ocram_s1_agent_m0_read),                       //                         .read
		.uav_write              (ocram_s1_agent_m0_write),                      //                         .write
		.uav_waitrequest        (ocram_s1_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (ocram_s1_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (ocram_s1_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (ocram_s1_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (ocram_s1_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (ocram_s1_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (ocram_s1_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (ocram_s1_address),                             //      avalon_anti_slave_0.address
		.av_write               (ocram_s1_write),                               //                         .write
		.av_readdata            (ocram_s1_readdata),                            //                         .readdata
		.av_writedata           (ocram_s1_writedata),                           //                         .writedata
		.av_byteenable          (ocram_s1_byteenable),                          //                         .byteenable
		.av_chipselect          (ocram_s1_chipselect),                          //                         .chipselect
		.av_clken               (ocram_s1_clken),                               //                         .clken
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (30),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (93),
		.PKT_CACHE_H               (115),
		.PKT_CACHE_L               (112),
		.PKT_ADDR_SIDEBAND_H       (91),
		.PKT_ADDR_SIDEBAND_L       (91),
		.PKT_PROTECTION_H          (111),
		.PKT_PROTECTION_L          (109),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_BURST_TYPE_H          (90),
		.PKT_BURST_TYPE_L          (89),
		.PKT_RESPONSE_STATUS_L     (116),
		.PKT_RESPONSE_STATUS_H     (117),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (79),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (71),
		.PKT_TRANS_LOCK            (70),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (96),
		.PKT_THREAD_ID_H           (108),
		.PKT_THREAD_ID_L           (97),
		.PKT_QOS_L                 (94),
		.PKT_QOS_H                 (94),
		.PKT_ORI_BURST_SIZE_L      (118),
		.PKT_ORI_BURST_SIZE_H      (120),
		.PKT_DATA_SIDEBAND_H       (92),
		.PKT_DATA_SIDEBAND_L       (92),
		.ST_DATA_W                 (121),
		.ST_CHANNEL_W              (2),
		.ID                        (0)
	) arm_hps_h2f_axi_master_agent (
		.aclk                   (arm_hps_h2f_user0_clock_clk),                                         //              clk.clk
		.aresetn                (~arm_hps_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (arm_hps_h2f_axi_master_agent_write_cp_valid),                         //         write_cp.valid
		.write_cp_data          (arm_hps_h2f_axi_master_agent_write_cp_data),                          //                 .data
		.write_cp_startofpacket (arm_hps_h2f_axi_master_agent_write_cp_startofpacket),                 //                 .startofpacket
		.write_cp_endofpacket   (arm_hps_h2f_axi_master_agent_write_cp_endofpacket),                   //                 .endofpacket
		.write_cp_ready         (arm_hps_h2f_axi_master_agent_write_cp_ready),                         //                 .ready
		.write_rp_valid         (arm_hps_h2f_axi_master_wr_limiter_rsp_src_valid),                     //         write_rp.valid
		.write_rp_data          (arm_hps_h2f_axi_master_wr_limiter_rsp_src_data),                      //                 .data
		.write_rp_channel       (arm_hps_h2f_axi_master_wr_limiter_rsp_src_channel),                   //                 .channel
		.write_rp_startofpacket (arm_hps_h2f_axi_master_wr_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.write_rp_endofpacket   (arm_hps_h2f_axi_master_wr_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.write_rp_ready         (arm_hps_h2f_axi_master_wr_limiter_rsp_src_ready),                     //                 .ready
		.read_cp_valid          (arm_hps_h2f_axi_master_agent_read_cp_valid),                          //          read_cp.valid
		.read_cp_data           (arm_hps_h2f_axi_master_agent_read_cp_data),                           //                 .data
		.read_cp_startofpacket  (arm_hps_h2f_axi_master_agent_read_cp_startofpacket),                  //                 .startofpacket
		.read_cp_endofpacket    (arm_hps_h2f_axi_master_agent_read_cp_endofpacket),                    //                 .endofpacket
		.read_cp_ready          (arm_hps_h2f_axi_master_agent_read_cp_ready),                          //                 .ready
		.read_rp_valid          (arm_hps_h2f_axi_master_rd_limiter_rsp_src_valid),                     //          read_rp.valid
		.read_rp_data           (arm_hps_h2f_axi_master_rd_limiter_rsp_src_data),                      //                 .data
		.read_rp_channel        (arm_hps_h2f_axi_master_rd_limiter_rsp_src_channel),                   //                 .channel
		.read_rp_startofpacket  (arm_hps_h2f_axi_master_rd_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.read_rp_endofpacket    (arm_hps_h2f_axi_master_rd_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.read_rp_ready          (arm_hps_h2f_axi_master_rd_limiter_rsp_src_ready),                     //                 .ready
		.awid                   (arm_hps_h2f_axi_master_awid),                                         // altera_axi_slave.awid
		.awaddr                 (arm_hps_h2f_axi_master_awaddr),                                       //                 .awaddr
		.awlen                  (arm_hps_h2f_axi_master_awlen),                                        //                 .awlen
		.awsize                 (arm_hps_h2f_axi_master_awsize),                                       //                 .awsize
		.awburst                (arm_hps_h2f_axi_master_awburst),                                      //                 .awburst
		.awlock                 (arm_hps_h2f_axi_master_awlock),                                       //                 .awlock
		.awcache                (arm_hps_h2f_axi_master_awcache),                                      //                 .awcache
		.awprot                 (arm_hps_h2f_axi_master_awprot),                                       //                 .awprot
		.awvalid                (arm_hps_h2f_axi_master_awvalid),                                      //                 .awvalid
		.awready                (arm_hps_h2f_axi_master_awready),                                      //                 .awready
		.wid                    (arm_hps_h2f_axi_master_wid),                                          //                 .wid
		.wdata                  (arm_hps_h2f_axi_master_wdata),                                        //                 .wdata
		.wstrb                  (arm_hps_h2f_axi_master_wstrb),                                        //                 .wstrb
		.wlast                  (arm_hps_h2f_axi_master_wlast),                                        //                 .wlast
		.wvalid                 (arm_hps_h2f_axi_master_wvalid),                                       //                 .wvalid
		.wready                 (arm_hps_h2f_axi_master_wready),                                       //                 .wready
		.bid                    (arm_hps_h2f_axi_master_bid),                                          //                 .bid
		.bresp                  (arm_hps_h2f_axi_master_bresp),                                        //                 .bresp
		.bvalid                 (arm_hps_h2f_axi_master_bvalid),                                       //                 .bvalid
		.bready                 (arm_hps_h2f_axi_master_bready),                                       //                 .bready
		.arid                   (arm_hps_h2f_axi_master_arid),                                         //                 .arid
		.araddr                 (arm_hps_h2f_axi_master_araddr),                                       //                 .araddr
		.arlen                  (arm_hps_h2f_axi_master_arlen),                                        //                 .arlen
		.arsize                 (arm_hps_h2f_axi_master_arsize),                                       //                 .arsize
		.arburst                (arm_hps_h2f_axi_master_arburst),                                      //                 .arburst
		.arlock                 (arm_hps_h2f_axi_master_arlock),                                       //                 .arlock
		.arcache                (arm_hps_h2f_axi_master_arcache),                                      //                 .arcache
		.arprot                 (arm_hps_h2f_axi_master_arprot),                                       //                 .arprot
		.arvalid                (arm_hps_h2f_axi_master_arvalid),                                      //                 .arvalid
		.arready                (arm_hps_h2f_axi_master_arready),                                      //                 .arready
		.rid                    (arm_hps_h2f_axi_master_rid),                                          //                 .rid
		.rdata                  (arm_hps_h2f_axi_master_rdata),                                        //                 .rdata
		.rresp                  (arm_hps_h2f_axi_master_rresp),                                        //                 .rresp
		.rlast                  (arm_hps_h2f_axi_master_rlast),                                        //                 .rlast
		.rvalid                 (arm_hps_h2f_axi_master_rvalid),                                       //                 .rvalid
		.rready                 (arm_hps_h2f_axi_master_rready),                                       //                 .rready
		.awuser                 (1'b0),                                                                //      (terminated)
		.aruser                 (1'b0),                                                                //      (terminated)
		.awqos                  (4'b0000),                                                             //      (terminated)
		.arqos                  (4'b0000),                                                             //      (terminated)
		.awregion               (4'b0000),                                                             //      (terminated)
		.arregion               (4'b0000),                                                             //      (terminated)
		.wuser                  (1'b0),                                                                //      (terminated)
		.ruser                  (),                                                                    //      (terminated)
		.buser                  ()                                                                     //      (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (120),
		.PKT_ORI_BURST_SIZE_L      (118),
		.PKT_RESPONSE_STATUS_H     (117),
		.PKT_RESPONSE_STATUS_L     (116),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (93),
		.PKT_PROTECTION_H          (111),
		.PKT_PROTECTION_L          (109),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (79),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (96),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (2),
		.ST_DATA_W                 (121),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) baremetal_s1_agent (
		.clk                     (arm_hps_h2f_user0_clock_clk),                      //             clk.clk
		.reset                   (baremetal_reset1_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (baremetal_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (baremetal_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (baremetal_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (baremetal_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (baremetal_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (baremetal_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (baremetal_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (baremetal_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (baremetal_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (baremetal_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (baremetal_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (baremetal_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (baremetal_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (baremetal_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (baremetal_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (baremetal_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (baremetal_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (baremetal_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (baremetal_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (baremetal_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (baremetal_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (baremetal_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (baremetal_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (baremetal_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (baremetal_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (baremetal_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (baremetal_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (baremetal_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (baremetal_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (baremetal_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (baremetal_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (baremetal_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (baremetal_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (baremetal_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (baremetal_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (122),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) baremetal_s1_agent_rsp_fifo (
		.clk               (arm_hps_h2f_user0_clock_clk),                   //       clk.clk
		.reset             (baremetal_reset1_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (baremetal_s1_agent_rf_source_data),             //        in.data
		.in_valid          (baremetal_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (baremetal_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (baremetal_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (baremetal_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (baremetal_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (baremetal_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (baremetal_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (baremetal_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (baremetal_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) baremetal_s1_agent_rdata_fifo (
		.clk               (arm_hps_h2f_user0_clock_clk),                  //       clk.clk
		.reset             (baremetal_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (baremetal_s1_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (baremetal_s1_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (baremetal_s1_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (baremetal_s1_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (baremetal_s1_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (baremetal_s1_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_startofpacket  (1'b0),                                         // (terminated)
		.in_endofpacket    (1'b0),                                         // (terminated)
		.out_startofpacket (),                                             // (terminated)
		.out_endofpacket   (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (120),
		.PKT_ORI_BURST_SIZE_L      (118),
		.PKT_RESPONSE_STATUS_H     (117),
		.PKT_RESPONSE_STATUS_L     (116),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (93),
		.PKT_PROTECTION_H          (111),
		.PKT_PROTECTION_L          (109),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (79),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (96),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (2),
		.ST_DATA_W                 (121),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ocram_s1_agent (
		.clk                     (arm_hps_h2f_user0_clock_clk),                  //             clk.clk
		.reset                   (baremetal_reset1_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (ocram_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (ocram_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (ocram_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (ocram_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (ocram_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (ocram_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (ocram_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (ocram_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (ocram_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (ocram_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (ocram_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (ocram_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (ocram_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (ocram_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (ocram_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (ocram_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (ocram_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (ocram_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (ocram_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (ocram_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (ocram_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (ocram_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (ocram_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (ocram_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (ocram_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (ocram_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (ocram_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (ocram_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (ocram_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (ocram_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (ocram_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (ocram_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),            //                .error
		.rdata_fifo_src_ready    (ocram_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ocram_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (ocram_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (122),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ocram_s1_agent_rsp_fifo (
		.clk               (arm_hps_h2f_user0_clock_clk),                  //       clk.clk
		.reset             (baremetal_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ocram_s1_agent_rf_source_data),                //        in.data
		.in_valid          (ocram_s1_agent_rf_source_valid),               //          .valid
		.in_ready          (ocram_s1_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (ocram_s1_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (ocram_s1_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (ocram_s1_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (ocram_s1_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (ocram_s1_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (ocram_s1_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (ocram_s1_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ocram_s1_agent_rdata_fifo (
		.clk               (arm_hps_h2f_user0_clock_clk),                  //       clk.clk
		.reset             (baremetal_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ocram_s1_agent_rdata_fifo_src_data),           //        in.data
		.in_valid          (ocram_s1_agent_rdata_fifo_src_valid),          //          .valid
		.in_ready          (ocram_s1_agent_rdata_fifo_src_ready),          //          .ready
		.out_data          (ocram_s1_agent_rdata_fifo_out_data),           //       out.data
		.out_valid         (ocram_s1_agent_rdata_fifo_out_valid),          //          .valid
		.out_ready         (ocram_s1_agent_rdata_fifo_out_ready),          //          .ready
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_startofpacket  (1'b0),                                         // (terminated)
		.in_endofpacket    (1'b0),                                         // (terminated)
		.out_startofpacket (),                                             // (terminated)
		.out_endofpacket   (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	HPSWrapper_mm_interconnect_0_router router (
		.sink_ready         (arm_hps_h2f_axi_master_agent_write_cp_ready),                        //      sink.ready
		.sink_valid         (arm_hps_h2f_axi_master_agent_write_cp_valid),                        //          .valid
		.sink_data          (arm_hps_h2f_axi_master_agent_write_cp_data),                         //          .data
		.sink_startofpacket (arm_hps_h2f_axi_master_agent_write_cp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (arm_hps_h2f_axi_master_agent_write_cp_endofpacket),                  //          .endofpacket
		.clk                (arm_hps_h2f_user0_clock_clk),                                        //       clk.clk
		.reset              (arm_hps_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                                   //       src.ready
		.src_valid          (router_src_valid),                                                   //          .valid
		.src_data           (router_src_data),                                                    //          .data
		.src_channel        (router_src_channel),                                                 //          .channel
		.src_startofpacket  (router_src_startofpacket),                                           //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                              //          .endofpacket
	);

	HPSWrapper_mm_interconnect_0_router router_001 (
		.sink_ready         (arm_hps_h2f_axi_master_agent_read_cp_ready),                         //      sink.ready
		.sink_valid         (arm_hps_h2f_axi_master_agent_read_cp_valid),                         //          .valid
		.sink_data          (arm_hps_h2f_axi_master_agent_read_cp_data),                          //          .data
		.sink_startofpacket (arm_hps_h2f_axi_master_agent_read_cp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (arm_hps_h2f_axi_master_agent_read_cp_endofpacket),                   //          .endofpacket
		.clk                (arm_hps_h2f_user0_clock_clk),                                        //       clk.clk
		.reset              (arm_hps_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                               //       src.ready
		.src_valid          (router_001_src_valid),                                               //          .valid
		.src_data           (router_001_src_data),                                                //          .data
		.src_channel        (router_001_src_channel),                                             //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                          //          .endofpacket
	);

	HPSWrapper_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (baremetal_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (baremetal_s1_agent_rp_valid),                  //          .valid
		.sink_data          (baremetal_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (baremetal_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (baremetal_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (arm_hps_h2f_user0_clock_clk),                  //       clk.clk
		.reset              (baremetal_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                         //       src.ready
		.src_valid          (router_002_src_valid),                         //          .valid
		.src_data           (router_002_src_data),                          //          .data
		.src_channel        (router_002_src_channel),                       //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                    //          .endofpacket
	);

	HPSWrapper_mm_interconnect_0_router_002 router_003 (
		.sink_ready         (ocram_s1_agent_rp_ready),                      //      sink.ready
		.sink_valid         (ocram_s1_agent_rp_valid),                      //          .valid
		.sink_data          (ocram_s1_agent_rp_data),                       //          .data
		.sink_startofpacket (ocram_s1_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (ocram_s1_agent_rp_endofpacket),                //          .endofpacket
		.clk                (arm_hps_h2f_user0_clock_clk),                  //       clk.clk
		.reset              (baremetal_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                         //       src.ready
		.src_valid          (router_003_src_valid),                         //          .valid
		.src_data           (router_003_src_data),                          //          .data
		.src_channel        (router_003_src_channel),                       //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                    //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (96),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (95),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (121),
		.ST_CHANNEL_W              (2),
		.VALID_WIDTH               (2),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) arm_hps_h2f_axi_master_wr_limiter (
		.clk                    (arm_hps_h2f_user0_clock_clk),                                        //       clk.clk
		.reset                  (arm_hps_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                                   //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                                   //          .valid
		.cmd_sink_data          (router_src_data),                                                    //          .data
		.cmd_sink_channel       (router_src_channel),                                                 //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                           //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                             //          .endofpacket
		.cmd_src_ready          (arm_hps_h2f_axi_master_wr_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (arm_hps_h2f_axi_master_wr_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (arm_hps_h2f_axi_master_wr_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (arm_hps_h2f_axi_master_wr_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (arm_hps_h2f_axi_master_wr_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                                  //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                                  //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                                //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                                   //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                          //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                            //          .endofpacket
		.rsp_src_ready          (arm_hps_h2f_axi_master_wr_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (arm_hps_h2f_axi_master_wr_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (arm_hps_h2f_axi_master_wr_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (arm_hps_h2f_axi_master_wr_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (arm_hps_h2f_axi_master_wr_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (arm_hps_h2f_axi_master_wr_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (arm_hps_h2f_axi_master_wr_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (96),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (95),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (121),
		.ST_CHANNEL_W              (2),
		.VALID_WIDTH               (2),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) arm_hps_h2f_axi_master_rd_limiter (
		.clk                    (arm_hps_h2f_user0_clock_clk),                                        //       clk.clk
		.reset                  (arm_hps_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                               //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                               //          .valid
		.cmd_sink_data          (router_001_src_data),                                                //          .data
		.cmd_sink_channel       (router_001_src_channel),                                             //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                                       //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                                         //          .endofpacket
		.cmd_src_ready          (arm_hps_h2f_axi_master_rd_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (arm_hps_h2f_axi_master_rd_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (arm_hps_h2f_axi_master_rd_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (arm_hps_h2f_axi_master_rd_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (arm_hps_h2f_axi_master_rd_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                              //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                              //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                                            //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                               //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                                      //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                                        //          .endofpacket
		.rsp_src_ready          (arm_hps_h2f_axi_master_rd_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (arm_hps_h2f_axi_master_rd_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (arm_hps_h2f_axi_master_rd_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (arm_hps_h2f_axi_master_rd_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (arm_hps_h2f_axi_master_rd_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (arm_hps_h2f_axi_master_rd_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (arm_hps_h2f_axi_master_rd_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (93),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_BURST_TYPE_H          (90),
		.PKT_BURST_TYPE_L          (89),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (79),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (121),
		.ST_CHANNEL_W              (2),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (85),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) baremetal_s1_burst_adapter (
		.clk                   (arm_hps_h2f_user0_clock_clk),                      //       cr0.clk
		.reset                 (baremetal_reset1_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                 //          .data
		.sink0_channel         (cmd_mux_src_channel),                              //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                        //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                          //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                //          .ready
		.source0_valid         (baremetal_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (baremetal_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (baremetal_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (baremetal_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (baremetal_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (baremetal_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (93),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_BURST_TYPE_H          (90),
		.PKT_BURST_TYPE_L          (89),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (79),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (121),
		.ST_CHANNEL_W              (2),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (85),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) ocram_s1_burst_adapter (
		.clk                   (arm_hps_h2f_user0_clock_clk),                  //       cr0.clk
		.reset                 (baremetal_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_001_src_valid),                        //     sink0.valid
		.sink0_data            (cmd_mux_001_src_data),                         //          .data
		.sink0_channel         (cmd_mux_001_src_channel),                      //          .channel
		.sink0_startofpacket   (cmd_mux_001_src_startofpacket),                //          .startofpacket
		.sink0_endofpacket     (cmd_mux_001_src_endofpacket),                  //          .endofpacket
		.sink0_ready           (cmd_mux_001_src_ready),                        //          .ready
		.source0_valid         (ocram_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (ocram_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (ocram_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (ocram_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (ocram_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (ocram_s1_burst_adapter_source0_ready)          //          .ready
	);

	HPSWrapper_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (arm_hps_h2f_user0_clock_clk),                                        //        clk.clk
		.reset              (arm_hps_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (arm_hps_h2f_axi_master_wr_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel       (arm_hps_h2f_axi_master_wr_limiter_cmd_src_channel),                  //           .channel
		.sink_data          (arm_hps_h2f_axi_master_wr_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket (arm_hps_h2f_axi_master_wr_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket   (arm_hps_h2f_axi_master_wr_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid         (arm_hps_h2f_axi_master_wr_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                               //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                               //           .valid
		.src0_data          (cmd_demux_src0_data),                                                //           .data
		.src0_channel       (cmd_demux_src0_channel),                                             //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                       //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                                         //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                               //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                               //           .valid
		.src1_data          (cmd_demux_src1_data),                                                //           .data
		.src1_channel       (cmd_demux_src1_channel),                                             //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                                       //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket)                                          //           .endofpacket
	);

	HPSWrapper_mm_interconnect_0_cmd_demux cmd_demux_001 (
		.clk                (arm_hps_h2f_user0_clock_clk),                                        //        clk.clk
		.reset              (arm_hps_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (arm_hps_h2f_axi_master_rd_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel       (arm_hps_h2f_axi_master_rd_limiter_cmd_src_channel),                  //           .channel
		.sink_data          (arm_hps_h2f_axi_master_rd_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket (arm_hps_h2f_axi_master_rd_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket   (arm_hps_h2f_axi_master_rd_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid         (arm_hps_h2f_axi_master_rd_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                                           //       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                           //           .valid
		.src0_data          (cmd_demux_001_src0_data),                                            //           .data
		.src0_channel       (cmd_demux_001_src0_channel),                                         //           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                                   //           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                                     //           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                                           //       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                                           //           .valid
		.src1_data          (cmd_demux_001_src1_data),                                            //           .data
		.src1_channel       (cmd_demux_001_src1_channel),                                         //           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                                   //           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket)                                      //           .endofpacket
	);

	HPSWrapper_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (arm_hps_h2f_user0_clock_clk),                  //       clk.clk
		.reset               (baremetal_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_src_valid),                            //          .valid
		.src_data            (cmd_mux_src_data),                             //          .data
		.src_channel         (cmd_mux_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                       //          .channel
		.sink0_data          (cmd_demux_src0_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                //          .endofpacket
	);

	HPSWrapper_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (arm_hps_h2f_user0_clock_clk),                  //       clk.clk
		.reset               (baremetal_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                        //          .valid
		.src_data            (cmd_mux_001_src_data),                         //          .data
		.src_channel         (cmd_mux_001_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                       //          .channel
		.sink0_data          (cmd_demux_src1_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)                //          .endofpacket
	);

	HPSWrapper_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (arm_hps_h2f_user0_clock_clk),                  //       clk.clk
		.reset              (baremetal_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                         //      sink.ready
		.sink_channel       (router_002_src_channel),                       //          .channel
		.sink_data          (router_002_src_data),                          //          .data
		.sink_startofpacket (router_002_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_002_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_src0_data),                          //          .data
		.src0_channel       (rsp_demux_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                         //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                         //          .valid
		.src1_data          (rsp_demux_src1_data),                          //          .data
		.src1_channel       (rsp_demux_src1_channel),                       //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                    //          .endofpacket
	);

	HPSWrapper_mm_interconnect_0_rsp_demux rsp_demux_001 (
		.clk                (arm_hps_h2f_user0_clock_clk),                  //       clk.clk
		.reset              (baremetal_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                         //      sink.ready
		.sink_channel       (router_003_src_channel),                       //          .channel
		.sink_data          (router_003_src_data),                          //          .data
		.sink_startofpacket (router_003_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_003_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_001_src0_data),                      //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),               //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                     //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                     //          .valid
		.src1_data          (rsp_demux_001_src1_data),                      //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                   //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),             //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)                //          .endofpacket
	);

	HPSWrapper_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (arm_hps_h2f_user0_clock_clk),                                        //       clk.clk
		.reset               (arm_hps_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                  //       src.ready
		.src_valid           (rsp_mux_src_valid),                                                  //          .valid
		.src_data            (rsp_mux_src_data),                                                   //          .data
		.src_channel         (rsp_mux_src_channel),                                                //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                            //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                               //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                               //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                             //          .channel
		.sink0_data          (rsp_demux_src0_data),                                                //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                                       //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                                         //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                                           //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                                           //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                                         //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                                            //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                                   //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket)                                      //          .endofpacket
	);

	HPSWrapper_mm_interconnect_0_rsp_mux rsp_mux_001 (
		.clk                 (arm_hps_h2f_user0_clock_clk),                                        //       clk.clk
		.reset               (arm_hps_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                              //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                              //          .valid
		.src_data            (rsp_mux_001_src_data),                                               //          .data
		.src_channel         (rsp_mux_001_src_channel),                                            //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                                      //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                        //          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                                               //     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                                               //          .valid
		.sink0_channel       (rsp_demux_src1_channel),                                             //          .channel
		.sink0_data          (rsp_demux_src1_data),                                                //          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),                                       //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket),                                         //          .endofpacket
		.sink1_ready         (rsp_demux_001_src1_ready),                                           //     sink1.ready
		.sink1_valid         (rsp_demux_001_src1_valid),                                           //          .valid
		.sink1_channel       (rsp_demux_001_src1_channel),                                         //          .channel
		.sink1_data          (rsp_demux_001_src1_data),                                            //          .data
		.sink1_startofpacket (rsp_demux_001_src1_startofpacket),                                   //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src1_endofpacket)                                      //          .endofpacket
	);

	HPSWrapper_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (arm_hps_h2f_user0_clock_clk),                  // in_clk_0.clk
		.in_rst_0_reset (baremetal_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (baremetal_s1_agent_rdata_fifo_out_data),       //     in_0.data
		.in_0_valid     (baremetal_s1_agent_rdata_fifo_out_valid),      //         .valid
		.in_0_ready     (baremetal_s1_agent_rdata_fifo_out_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                 //         .error
	);

	HPSWrapper_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (arm_hps_h2f_user0_clock_clk),                  // in_clk_0.clk
		.in_rst_0_reset (baremetal_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ocram_s1_agent_rdata_fifo_out_data),           //     in_0.data
		.in_0_valid     (ocram_s1_agent_rdata_fifo_out_valid),          //         .valid
		.in_0_ready     (ocram_s1_agent_rdata_fifo_out_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)             //         .error
	);

endmodule
