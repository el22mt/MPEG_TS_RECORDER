module MemoryExample (

    //
    // Application Clock
    //
    input         clock,                  //Main application clock signal
    
    //
    // Application Reset
    //
    input         reset,                  //Application Reset from LT24 - Use For All Logic Clocked with "clock"

    //
    // DDR Read Interface
    //
    output        ddr_read_clock,         //Clock for DDR3 Read Logic. Can be connected to "clock"
    input         ddr_read_reset,         //Reset for DDR3 Read Logic. If "ddr_read_clock" is connected to "clock", use "reset" for DDR read logic instead of this wire.
    output [23:0] ddr_read_address,       //64MB Chunk of DDR3. Word Address (unit of address is 32bit).
    input         ddr_read_waitrequest,   //When wait request is high, read is ignored.
    output        ddr_read_read,          //Assert read for one cycle for each word of data to be read.
    input         ddr_read_readdatavalid, //Read Data Valid will be high for each word of data read, but latency varies from read.
    input  [31:0] ddr_read_readdata,      //Read Data should only be used if read data valid is high.

    //
    // DDR Write Interface
    //
    output        ddr_write_clock,        //Clock for DDR3 Write Logic. Can be connected to "clock"
    input         ddr_write_reset,        //Reset for DDR3 Write Logic. If "ddr_read_clock" is connected to "clock", use "reset" for DDR write logic instead of this wire.
    output [23:0] ddr_write_address,      //64MB Chunk of DDR3. Word Address (unit of address is 32bit).  
    input         ddr_write_waitrequest,  //When wait request is high, write is ignored.
    output        ddr_write_write,        //Assert write for one cycle for each word of data to be written
    output [31:0] ddr_write_writedata,    //Write data should be valid when write is high.
    output [ 3:0] ddr_write_byteenable,   //Byte enable should be valid when write is high.    
);

/*
 * Test DDR Memory
 *
 * This will write 16kB to the DDR memory using the write interface
 *
 */


//We will use a single clock domain, so DDR write clock is the same as clock
assign ddr_write_clock = clock;


wire        writeWait;
reg         writeRequest;
reg  [23:0] writeAddress;
reg  [31:0] writeData;
reg  [ 3:0] writeByteEn;

reg         writeDone; //All addresses written when high.

always @ (posedge clock or posedge reset) begin //use "reset" for DDR write logic as single clock domain. If using multiple clocks, should use ddr_write_reset instead.
    if (reset) begin
        writeRequest     <= 1'b0;
        writeAddress     <= 24'h000000;
        writeData        <= 32'h00000000;
        writeByteEn      <= 4'hF;
        writeDone        <= 1'b0;
    end else begin
        writeByteEn  <= 4'hF;                           //All bytes written in each 32-bit word for this example.
        writeRequest <= !writeDone;                     //Request to write if we are not yet done.
        if (writeRequest && !writeWait && !writeDone) begin
            //Each time a write is accepted by the memory (i.e. writeRequest is high, and writeWait is low)
            writeAddress <= writeAddress + 24'h1;           //Increment the address
            writeData    <= {8'b0,writeAddress + 24'h1};    //For example, lets set data equal to the address.
`ifdef MODEL_TECH
            writeDone    <= (writeAddress == 24'h2000);     //Done once last address is written. For simulation, we'll use a smaller max value so we don't have to wait as long.
`else
            writeDone    <= (writeAddress == 24'hFFFFFF);   //Done once last address is written.
`endif
        end
    end
end

//External interface signals
assign writeWait = ddr_write_waitrequest;
assign ddr_write_address = writeAddress;
assign ddr_write_writedata = writeData;
assign ddr_write_byteenable = writeByteEn;
assign ddr_write_write = writeRequest;

endmodule
